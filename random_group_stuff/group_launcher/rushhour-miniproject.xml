<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
const int boardLength = 6;
const int boardHeight = 6;

const int OCCUPIED = 1;
const int FREE = 0;

typedef int[FREE,OCCUPIED] bit_t;
typedef int[0, boardLength - 1] xCoord_t;
typedef int[0, boardHeight - 1] yCoord_t;

bit_t board[boardLength][boardHeight];</declaration><template><name x="5" y="5">VCar</name><parameter>const int length, const xCoord_t x, yCoord_t y</parameter><declaration>// Place local declarations here.

void Mark() {
	int i;
	for (i = y; i &lt; y + length; i++) {
		board[x][i] = OCCUPIED;
	}
}

void MoveNorth() {
	if (board[x][y - 1] == FREE) {
		board[x][y + length - 1] = FREE;
		y--;
		Mark();
	}
}

void MoveSouth() {
	if (board[x][y + length] == FREE) {
		board[x][y] = FREE;
		y++;
		Mark();
	}
}</declaration><location id="id0" x="-608" y="-56"></location><location id="id1" x="-272" y="40"></location><location id="id2" x="-264" y="-144"></location><location id="id3" x="-832" y="-56"></location><init ref="id3"/><transition><source ref="id2"/><target ref="id0"/><nail x="-512" y="-200"/></transition><transition><source ref="id1"/><target ref="id0"/><nail x="-488" y="104"/></transition><transition><source ref="id0"/><target ref="id1"/><label kind="guard" x="-416" y="-24">y + length &lt; boardHeight</label><label kind="assignment" x="-448" y="16">MoveSouth()</label></transition><transition><source ref="id0"/><target ref="id2"/><label kind="guard" x="-480" y="-120">y &gt; 0</label><label kind="assignment" x="-472" y="-88">MoveNorth()</label></transition><transition><source ref="id3"/><target ref="id0"/><label kind="assignment" x="-780" y="-56">Mark()</label></transition></template><template><name>HCar</name><parameter>const int length, xCoord_t x, const yCoord_t y</parameter><declaration>// Place local declarations here.

void Mark() {
	int i;
	for (i = x; i &lt; x + length; i++) {
		board[i][y] = OCCUPIED;
	}
}

void MoveEast() {
	if (board[x + length][y] == FREE) {
		board[x][y] = FREE;
		x++;
		Mark();
	}
}

void MoveWest() {
	if (board[x - 1][y] == FREE) {
		board[x + length - 1][y] = FREE;
		x--;
		Mark();
	}
}</declaration><location id="id4" x="-200" y="-16"></location><location id="id5" x="72" y="88"></location><location id="id6" x="64" y="-112"></location><location id="id7" x="-424" y="-16"></location><init ref="id7"/><transition><source ref="id5"/><target ref="id4"/><nail x="-160" y="160"/></transition><transition><source ref="id6"/><target ref="id4"/><nail x="-144" y="-152"/></transition><transition><source ref="id4"/><target ref="id5"/><label kind="guard" x="-64" y="16">x + length &lt; boardLength</label><label kind="assignment" x="-104" y="48">MoveEast()</label></transition><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="-120" y="-80">x &gt; 0</label><label kind="assignment" x="-80" y="-56">MoveWest()</label></transition><transition><source ref="id7"/><target ref="id4"/><label kind="assignment" x="-372" y="-16">Mark()</label></transition></template><system>// Place template instantiations here.
red = HCar(2, 3, 2);
tyrkis = HCar(2, 0, 0);
orange = HCar(2, 2, 0);
green = HCar(2, 3, 3);
beige = HCar(2, 4, 4);
darkgreen = HCar(2, 4, 4);
lysgul = HCar(2, 1, 5);
blue = VCar(2, 4, 0);
pink = VCar(2, 2, 1);
YellowTruck = VCar(3, 5, 1);
purple = VCar(2, 1, 2);
PurpleTruck = VCar(3, 0, 3);
black = VCar(2, 3, 4);

system red, tyrkis, orange, green, beige, darkgreen, lysgul, blue, pink, YellowTruck, purple, PurpleTruck, black;</system></nta>