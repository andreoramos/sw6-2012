<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
const int boardLength = 6;
const int boardHeight = 6;

clock time;

chan a, b;

//int counter = 0;

const int OCCUPIED = 1;
const int FREE = 0;

typedef int[FREE,OCCUPIED] bit_t;
typedef int[0, boardLength - 1] xCoord_t;
typedef int[0, boardHeight - 1] yCoord_t;

bit_t board[boardLength][boardHeight];</declaration><template><name x="5" y="5">VCar</name><parameter>const int length, const xCoord_t x, yCoord_t y</parameter><declaration>// Place local declarations here.

clock t;

void Mark() {
	int i;
	for (i = y; i &lt; y + length; i++) {
		board[x][i] = OCCUPIED;
	}
}

void MoveNorth() {
	board[x][y + length - 1] = FREE;
	y--;
	Mark();
	//counter++;
}

void MoveSouth() {
	board[x][y] = FREE;
	y++;
	Mark();
	//counter++;
}</declaration><location id="id0" x="-456" y="-136"><label kind="invariant" x="-472" y="-168">t &lt;= length</label></location><location id="id1" x="-616" y="24"><label kind="invariant" x="-672" y="40">t &lt;= length</label></location><location id="id2" x="-616" y="-56"></location><location id="id3" x="-696" y="-56"><committed/></location><init ref="id3"/><transition><source ref="id0"/><target ref="id2"/><label kind="guard" x="-560" y="-160">t == length</label><label kind="synchronisation" x="-640" y="-128">b!</label><label kind="assignment" x="-616" y="-152">t = 0</label><nail x="-624" y="-128"/></transition><transition><source ref="id1"/><target ref="id2"/><label kind="guard" x="-688" y="-16">t == length</label><label kind="synchronisation" x="-640" y="-32">b!</label><label kind="assignment" x="-680" y="0">t = 0</label></transition><transition><source ref="id2"/><target ref="id1"/><label kind="guard" x="-600" y="-24">y + length &lt; boardHeight &amp;&amp; 
board[x][y + length] == FREE</label><label kind="synchronisation" x="-440" y="-48">a?</label><label kind="assignment" x="-584" y="-40">MoveSouth(), t = 0</label><nail x="-424" y="-48"/><nail x="-408" y="24"/></transition><transition><source ref="id2"/><target ref="id0"/><label kind="guard" x="-608" y="-96">y &gt; 0 &amp;&amp; 
board[x][y - 1] == FREE</label><label kind="synchronisation" x="-440" y="-96">a?</label><label kind="assignment" x="-568" y="-112">MoveNorth(), t = 0</label><nail x="-440" y="-64"/></transition><transition><source ref="id3"/><target ref="id2"/><label kind="assignment" x="-680" y="-56">Mark()</label></transition></template><template><name>HCar</name><parameter>const int length, xCoord_t x, const yCoord_t y</parameter><declaration>// Place local declarations here.

clock t;

void Mark() {
	int i;
	for (i = x; i &lt; x + length; i++) {
		board[i][y] = OCCUPIED;
	}
}

void MoveEast() {
	board[x][y] = FREE;
	x++;
	Mark();
	//counter++;
}

void MoveWest() {
	board[x + length - 1][y] = FREE;
	x--;
	Mark();
	//counter++;
}</declaration><location id="id4" x="-48" y="-16"><label kind="invariant" x="-96" y="-8">t &lt;= length</label></location><location id="id5" x="-56" y="120"><label kind="invariant" x="-120" y="128">t &lt;= length</label></location><location id="id6" x="-200" y="-16"></location><location id="id7" x="-280" y="-16"><committed/></location><init ref="id7"/><transition><source ref="id4"/><target ref="id6"/><label kind="guard" x="-160" y="-40">t == length</label><label kind="synchronisation" x="-80" y="-40">b!</label><label kind="assignment" x="-128" y="-16">t = 0</label></transition><transition><source ref="id5"/><target ref="id6"/><label kind="guard" x="-144" y="16">t == length</label><label kind="synchronisation" x="-56" y="40">b!</label><label kind="assignment" x="-104" y="40">t = 0</label><nail x="-64" y="24"/></transition><transition><source ref="id6"/><target ref="id5"/><label kind="guard" x="-240" y="80">x + length &lt; boardLength &amp;&amp; 
board[x + length][y] == FREE</label><label kind="synchronisation" x="-256" y="40">a?</label><label kind="assignment" x="-232" y="56">MoveEast(), t = 0</label><nail x="-256" y="120"/></transition><transition><source ref="id6"/><target ref="id4"/><label kind="guard" x="-200" y="-120">x &gt; 0 &amp;&amp; 
board[x - 1][y] == FREE</label><label kind="synchronisation" x="-224" y="-96">a?</label><label kind="assignment" x="-184" y="-88">MoveWest(), t = 0</label><nail x="-208" y="-120"/><nail x="-48" y="-112"/></transition><transition><source ref="id7"/><target ref="id6"/><label kind="assignment" x="-264" y="-8">Mark()</label></transition></template><template><name>Driver</name><location id="id8" x="-56" y="0"></location><location id="id9" x="-224" y="8"></location><init ref="id9"/><transition><source ref="id8"/><target ref="id9"/><label kind="synchronisation" x="-152" y="16">b?</label><nail x="-136" y="56"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="synchronisation" x="-152" y="-48">a!</label><nail x="-144" y="-56"/></transition></template><system>// Place template instantiations here.

driver1 = Driver();
driver2 = Driver();
driver3 = Driver();


red = HCar(2, 3, 2);
tyrkis = HCar(2, 0, 0);
orange = HCar(2, 2, 0);
green = HCar(2, 3, 3);
beige = HCar(2, 4, 4);
darkgreen = HCar(2, 4, 5);
lysgul = HCar(2, 1, 5);
blue = VCar(2, 4, 0);
pink = VCar(2, 2, 1);
YellowTruck = VCar(3, 5, 1);
purple = VCar(2, 1, 2);
PurpleTruck = VCar(3, 0, 3);
black = VCar(2, 3, 4);

system driver1, red, tyrkis, orange, green, beige, darkgreen, lysgul, blue, pink, YellowTruck, purple, PurpleTruck, black;
/*
green = HCar(2, 0, 0);
red = HCar(2, 1, 2);
bluetruck = HCar(3, 1, 3);
tyrkistruck = HCar(3, 3, 5);
purpletruck = VCar(3, 0, 1);
yellow = VCar(2, 2, 0);
yellowtruck = VCar(3, 3, 0);

system driver1, green, red, bluetruck, tyrkistruck, purpletruck, yellow, yellowtruck;*/</system></nta>